// Copyright (c) Meta Platforms, Inc. and affiliates.
// This source code is licensed under the BSD 3-Clause License found in the
// LICENSE file in the root directory of this source tree.

syntax = "proto2";

import "common.proto";
import "armadillo_xma.proto";

message Armadillo {
  message Content {
    message CommonSticker {
      enum StickerType {
        SMALL_LIKE = 1;
        MEDIUM_LIKE = 2;
        LARGE_LIKE = 3;
      }
      optional StickerType sticker_type = 1;
    }
    message RavenMessage {
      enum EphemeralType {
        VIEW_ONCE = 0;
        ALLOW_REPLAY = 1;
        KEEP_IN_CHAT = 2;
      }
      optional EphemeralType ephemeral_type = 1;
      oneof media_content {
        SubProtocol image_message = 2;
        SubProtocol video_message = 3;
      }
    }
    message RavenActionNotifMessage {
        enum ActionType {
          PLAYED = 0;
          SCREENSHOT = 1;
          FORCE_DISABLE = 2;
        }
        optional MessageKey key = 1;
        optional int64 action_timestamp = 2;
        optional ActionType action_type = 3;
    }
    message ExtendedContentMessageWithSear {
      optional string sear_id = 1;
      optional bytes payload = 2;
      optional string native_url = 3;
      optional SubProtocol sear_associated_message = 4;
      optional string sear_sent_with_message_id = 5;
    }
    message ScreenshotAction {
      enum ScreenshotType {
        SCREENSHOT_IMAGE = 1;
        SCREEN_RECORDING = 2;
      }
      optional ScreenshotType screenshot_type = 1;
    }
    message ImageGalleryMessage {
      repeated SubProtocol images = 1;
    }
    message BumpExistingMessage {
      optional MessageKey key = 1;
    }
    message NoteReplyMessage {
      optional string note_id = 1;
      optional MessageText note_text = 2;
      optional int64 note_timestamp_ms = 3;
      oneof note_reply_content {
        MessageText text_content = 4;
        SubProtocol sticker_content = 5;
        SubProtocol video_content = 6;
      }
    }
    message PaymentsTransactionMessage {
      enum PaymentStatus {
        PAYMENT_UNKNOWN = -1;
        REQUEST_INITED = 4;
        REQUEST_DECLINED = 5;
        REQUEST_TRANSFER_INITED = 6;
        REQUEST_TRANSFER_COMPLETED = 7;
        REQUEST_TRANSFER_FAILED = 8;
        REQUEST_CANCELED = 9;
        REQUEST_EXPIRED = 10;
        TRANSFER_INITED = 11;
        TRANSFER_PENDING = 12;
        TRANSFER_PENDING_RECIPIENT_VERIFICATION = 13;
        TRANSFER_CANCELED = 14;
        TRANSFER_COMPLETED = 15;
        TRANSFER_NO_RECEIVER_CREDENTIAL_NO_RTS_PENDING_CANCELED = 16; 
        TRANSFER_NO_RECEIVER_CREDENTIAL_NO_RTS_PENDING_OTHER = 17; 
        TRANSFER_REFUNDED = 18;
        TRANSFER_PARTIAL_REFUND = 19;
        TRANSFER_CHARGED_BACK = 20;
        TRANSFER_EXPIRED = 21;
        TRANSFER_DECLINED = 22;
        TRANSFER_UNAVAILABLE = 23;
      }
      optional uint64 transaction_id = 1;
      optional string amount = 2;
      optional string currency = 3;
      optional PaymentStatus payment_status = 4;
      optional ExtendedContentMessage extended_content_message = 5;
    }

    oneof content {
      CommonSticker common_sticker = 1;
      ScreenshotAction screenshot_action = 3;
      ExtendedContentMessage extended_content_message = 4;
      RavenMessage raven_message = 5;
      RavenActionNotifMessage raven_action_notif_message = 6;
      ExtendedContentMessageWithSear extended_message_content_with_sear = 7;
      ImageGalleryMessage image_gallery_message = 8;
      PaymentsTransactionMessage payments_transaction_message = 10;
      BumpExistingMessage bump_existing_message = 11;
      NoteReplyMessage note_reply_message = 13;
      RavenMessage raven_message_msgr = 14;
    }
  }
  message ApplicationData {
    message MetadataSyncNotification {
      repeated MetadataSyncAction actions = 2;
    }
    message MetadataSyncAction {
      message SyncActionMessageRange {
        optional int64 last_message_timestamp = 1;
        optional int64 last_system_message_timestamp = 2;
        repeated SyncActionMessage messages = 3;
      }
      message SyncActionMessage {
        optional MessageKey key = 1;
        optional int64 timestamp = 2;
      }
      message SyncChatAction {
        message ActionChatArchive {
          optional SyncActionMessageRange message_range = 1;
          optional bool archived = 2;
        }
        message ActionChatDelete {
          optional SyncActionMessageRange message_range = 1;
        }
        message ActionChatRead {
          optional SyncActionMessageRange message_range = 1;
          optional bool read = 2;
        }
        optional string chat_id = 1 [(jid) = true];
        oneof action {
          ActionChatArchive chat_archive = 101;
          ActionChatDelete chat_delete = 102;
          ActionChatRead chat_read = 103;
        }
      }
      message SyncMessageAction {
        message ActionMessageDelete {}
        optional MessageKey key = 1;
        oneof action {
          ActionMessageDelete message_delete = 101;
        }
      }
      optional int64 action_timestamp = 1;
      oneof action_type {
        SyncChatAction chat_action = 101;
        SyncMessageAction message_action = 102;
      }
    }
    message AIBotResponseMessage {
      optional string summon_token = 1;
      optional string message_text = 2;
      optional string serialized_extras = 3;
    }
    oneof application_data {
      MetadataSyncNotification metadata_sync = 1;
      AIBotResponseMessage ai_bot_response = 2;
    }
  }
  message Signal {
    message EncryptedBackupsSecrets {
      message Epoch {
        enum EpochStatus {
          ES_OPEN = 1;
          ES_CLOSE = 2;
        }
        optional uint64 id = 1;
        optional bytes anon_id = 2;
        optional bytes root_key = 3;
        optional EpochStatus status = 4;
      }
      optional uint64 backup_id = 1;
      optional uint64 server_data_id = 2;
      repeated Epoch epoch = 3;
      optional bytes temp_ocmf_client_state = 4;
      optional bytes mailbox_root_key = 5;
      optional bytes oblivious_validation_token = 6;
    }
    oneof signal {
      EncryptedBackupsSecrets encrypted_backups_secrets = 1;
    }
  }
  message SubProtocolPayload {
    optional FutureProofBehavior future_proof = 1;
  }
  message Payload {
    oneof payload {
      Content content = 1;
      ApplicationData application_data = 2;
      Signal signal = 3;
      SubProtocolPayload sub_protocol = 4;
    }
  }
  message Metadata {}
  optional Payload payload = 1;
  optional Metadata metadata = 2;
}
